#!/bin/bash
set -e

help () {
    cat<<EOF

Usage: quick-vim [install|uninstall|upgrade|help]

Commands:
    
    install    installs from the git repo
    uninstall  restores original system vim config
    upgrade    clobbers existing setup and installs fresh from git
    help       print this msg

EOF
}

# backs default home vim up
backup () {
    if [ -e ./backup ]
    then 
        echo 'skipping backup'
    else
        mkdir -p ./backup
        if [ -e ~/.nvimrc ]
        then
            mv ~/.nvimrc ./backup/.nvimrc
        fi
        if [ -e ~/.nvim ]
        then
            mv ~/.nvim ./backup/.nvim
        fi
    fi
}

# copy in pathogen and then clone in bundles
install () {
    backup

    # copy in vimrc and pathogen
    cp ./vimrc ~/.nvimrc
    cp -r ./vim ~/.nvim

    # add in bundles from bundle.txt
    mkdir -p ~/.nvim/bundle
    bundles=$(cat ./bundles.txt)
    cd ~/.nvim/bundle
    for repo in $bundles; do
        git clone $repo
    done
    cd ..
    ln -sf ~/.nvimrc init.vim
}

# if backup exists clobbers home vim and copies in backup
uninstall () {
    if [ -e ./backup ]
    then
        rm ~/.nvimrc
        rm -rf ~/.nvim
        if [ -e ./backup/.nvimrc ]
        then
            mv ./backup/.nvimrc ~/.nvimrc
        fi
        if [ -e ./backup/.nvim ]
        then
            mv ./backup/.nvim ~/.nvim
        fi
        rm -rf ./backup
    fi
}

# kills everything, pulls latest from git, installs it
upgrade () {
    uninstall
    git pull
    install
}

# fucking cryptic bash, test for a valid arg and execute it if so; otherwise show the help
if [ "$1" != "" ]; then
    wl=(install uninstall upgrade help)
    for i in "${wl[@]}"
    do
        if [ "$i" == "$1" ]
        then
            $1
            exit 0
        fi
    done
fi

# show a flailer some help
help 
exit 0
